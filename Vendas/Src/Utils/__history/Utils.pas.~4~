unit Utils;

interface

uses
  System.SysUtils,
  System.Classes,
  Exceptions.FieldName,
  Vcl.Forms,
  Vcl.Controls,
  System.RTTI,
  RTTI.FieldName;

type
  TUtils = class
  private
  public
    class procedure TratarExceptionsFieldName(const AForm: TForm; const E: ExceptionsFieldName);

  end;

implementation

{ TUtils }

class procedure TUtils.TratarExceptionsFieldName(const AForm: TForm;
  const E: ExceptionsFieldName);
var
  LRttiContext : TRttiContext;
  LRttiType : TRttiType;
  LRttiField :  TRttiField;
  LCustomAttribute : TCustomAttribute;
  LFieldName : FieldName;
  LComponent : TComponent;
begin
  LRttiContext := TRttiContext.Create;
  LRttiType := LRttiContext.GetType(AForm.ClassInfo);

  for LRttiType in LRttiType.GetFields do
  begin
    if(LRttiField.Parent <> LRttiField)then
      Continue;

     for LCustomAttribute in LRttiField.GetAttributes do
     begin
       if( not LCustomAttribute is FieldName) then
         Exit;

       LFieldName := FieldName(LCustomAttribute);
       if(LFieldName.Nome.ToUpper <> E.FieldName)then
         Continue;

       LComponent := AForm.FindComponent(LRttiField.Name);
       if(LComponent = nil)then
         Continue;

       if(LComponent is TWinControl)then
         Continue;

       TWinControl(LComponent).SetFocus;
     end;

  end;
end;

end.
